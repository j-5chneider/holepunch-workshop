[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Binderising R projects with holepunch\n",
    "section": "",
    "text": "In a nutshell, mybinder provides a way for taking the static contents of a repository on, for example, GitHub and launching them in an interactive environment in the browser!\n\nFigure credit: Juliette Taka, Logilab and the OpenDreamKit project\nTo do so, repository owners add configuration files according the type of environment they wish to create which software called repo2Docker can use to create the specified computational environments. Here’s the full list of configuration files that docker2repo recognises.\nTo avoid confusion, let’s disambiguate some terms before moving on:\n\nIn this section, there are some related terms, which will be outlined here for clarity:\n\nProject Binder: An open community that makes it possible to create sharable, interactive, reproducible environments. The technological output of this project is a BinderHub.\nBinderHub: A cloud-based infrastructure for generating Binders. The most widely-used is mybinder.org, which is maintained by the Project Binder team. It is built upon a range of open source tools, including JupyterHub, for providing cloud compute resources to users via a browser; and repo2docker, for building docker images from projects. Since it is an open project, it is possible to create other BinderHubs which can support more specialised configurations. One such configuration could include authentication to enable private repositories to be shared amongst close collaborators.\nA Binder: A sharable version of a project that can be viewed and interacted within a reproducible computational environment running in the cloud via a web browser. By automating the installation of the computing environment (as discussed in the Reproducible Environments chapter), Project Binder transforms the overhead of sharing such an environment into the act of sharing a URL.\nmybinder.org: A public and free BinderHub. Because it is public, you should not use it if your project requires any personal or sensitive information (such as passwords).\nBinderize: The process of making a Binder from a project.\n\nDisambiguation taken for the Turing Way chapter on Binder."
  },
  {
    "objectID": "index.html#what-is-holepunch",
    "href": "index.html#what-is-holepunch",
    "title": "Binderising R projects with holepunch\n",
    "section": "What is holepunch\n",
    "text": "What is holepunch\n\nholepunch is an R package by Karthik Ram that helps automate the process of binderising an R project. It provides functions for creating the configuration files required to binderise and R project."
  },
  {
    "objectID": "index.html#workshop-materials",
    "href": "index.html#workshop-materials",
    "title": "Binderising R projects with holepunch\n",
    "section": "Workshop materials",
    "text": "Workshop materials\nToday we’ll be working with a subset of materials from the published compendium of code, data, and author’s manuscript:\nCarl Boettiger. (2018, April 17). cboettig/noise-phenomena: Supplement to: “From noise to knowledge: how randomness generates novel phenomena and reveals information” (Version revision-2). Zenodo. http://doi.org/10.5281/zenodo.1219780\naccompanying the publication:\nCarl Boettiger . From noise to knowledge: how randomness generates novel phenomena and reveals information. Published in Ecology Letters, 22 May 2018 https://doi.org/10.1111/ele.13085\n\n\nThe materials have been compiled into a research compendium containing all data and code associated with the referenced publication, as well as a paper written in Rmarkdown which can be knitted to pdf, ready for submission to Ecology Letters.\nThe materials are available on GitHub as a template repository.\nCopy compendium template (GitHub)\nTo access the materials, first head to:\nhttps://github.com/r-rse/holepunch-compendium-tmpl\nNext, click on Use this template > Create a new repository\n\nComplete new repo details (GitHub)\nNext, complete the details for your copy of the repository:\n\nRepository name: holepunch-compendium\nDescription: Binderised Research Compendium in R created using holepunch\n\n\nFinally, click on Create repository from template to create your repo.\nClone repo\nOnce you’ve created your repo on GitHub, you’ll need to clone it to work with it locally.\nCopy URL (GitHub)\nFirst click on Code and click on the clipboard icon on the HTTPS panel to copy the URL.\n\nNext let’s move to RStudio.\nCreate New RStudio Project (RStudio)\nWe’ll start by creating a new project using:\nFile > New Project\nThis opens up the New Project Wizard. Select Version Control as the source for our new project.\n\nNext select Git:\n\nFinally:\n\nPaste the URL of the repo you copied form GitHub in Repository URL.\nSelect a destination for the cloned repo. I’m choosing to clone it to my Desktop.\n\n\nClick on Create Project which will clone the repository from GitHub and launch the new project in RStudio.\n\nLet’s use the dir_tree() function in package fs to examine the contents of the repository. The main files of interest are highlighted:\n\nfs::dir_tree(recurse = TRUE)\n\n.\n├── CONDUCT.md\n├── CONTRIBUTING.md\n├── LICENSE\n├── LICENSE.md\n├── R\n│   └── process-data.R <- R function used in paper\n├── README.Rmd\n├── README.md\n├── analysis\n│   ├── data\n│   │   ├── DO-NOT-EDIT-ANY-FILES-IN-HERE-BY-HAND\n│   │   └── raw_data\n│   │       └── gillespie.csv <- raw data\n│   ├── paper\n│   │   ├── elsarticle.cls <- template for Latex styling of the article\n│   │   ├── mybibfile.bib\n│   │   ├── numcompress.sty\n│   │   ├── paper.Rmd <- The paper written in Rmarkdown\n│   │   ├── paper.fff\n│   │   ├── paper.pdf \n│   │   ├── paper.spl\n│   │   ├── paper.tex\n│   │   ├── paper_files\n│   │   │   └── figure-latex\n│   │   │       └── figure1-1.pdf\n│   │   └── refs.bib <- The bibliography used for references in the paper \n│   └── templates\n│       ├── journal-of-archaeological-science.csl\n│       ├── template.Rmd\n│       └── template.docx\n└── holepunch-compendium-tmpl.Rproj"
  },
  {
    "objectID": "index.html#binderise-our-project",
    "href": "index.html#binderise-our-project",
    "title": "Binderising R projects with holepunch\n",
    "section": "Binderise our project",
    "text": "Binderise our project\nBefore we can binderise our project, let’s first install holepunch\nInstall holepunch\n\nremotes::install_github(\"karthik/holepunch\")\n\nUsing github PAT from envvar GITHUB_PAT\n\n\nSkipping install of 'holepunch' from a github remote, the SHA1 (031fd961) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\n\nlibrary(holepunch)\n\nI’m going to show you two ways to binderise your projects today, the standard way and the R compendium way.\nLet’s start with the standard way to configure your R project, as recommended by the binder project.\nTo show you the two approaches, I’m going to prepare each approach in a separate git branch. At the end, you can choose which approach you prefer and we’ll merge that into our main branch. You will however have a lasting record of the two approaches in the two separate branches."
  },
  {
    "objectID": "index.html#binderise-project-with-install.r-and-runtime.txt",
    "href": "index.html#binderise-project-with-install.r-and-runtime.txt",
    "title": "Binderising R projects with holepunch\n",
    "section": "Binderise project with install.R and runtime.txt\n",
    "text": "Binderise project with install.R and runtime.txt\n\nTo show you the standard approach we’ll be working in a a branch called install-r. So let’s go ahead and create it.\nCreate install-r branch (RStudio)\nIn the RStudio git panel, click on the new branch button which launches a new branch pop up.\nGive the new branch the name install-r and click on Create.\n\nYou should now be in the install-r branch.\n\nCreate install.R file (RStudio)\nThe next stage is to create an install.R file. This is an R script that is run when building our computational environment and should contain code to install all necessary packages.\nYou could this manually but holepunch provides the nifty function write_install() that not only creates the file but also scans the project for dependencies and populates the file with the code to install them!\n\nwrite_install()\n\n✔ Writing './.binder/install.R'\n\n.binder\n└── install.R\nThe function creates and writes the file to a hidden .binder directory.\nIf you open the file, you will see a character vector of all the packages required to reproduce our paper was created and wrapped in the install.packages() function.\n\nCreate runtime.txt file (RStudio)\nThe runtime.txt is effectively the file that freezes the versions of R and any packages installed in time.\nBy adding r-<YYYY>-<MM>-<DD> we are effectively telling binderhub that we want an R environment created with the version of R and any packages specified in install.R that were current on the date specified installed. We can also request a specific version of R with r-<version>-<YYYY>-<MM>-<DD>.\n\nFor dates prior to 2022-01-01, R and packages are installed from snapshots on MRAN. However, MRAN will be shutting down however in July.\nIf we request R 4.1 or later, or specify a snapshot date newer than 2022-01-01, packagemanager.rstudio.com is used to provide much faster installations via binary packages.\n\nHolepunch provides another nice function, write_runtime(), for creating the file and also configuring it with today’s date.\n\nwrite_runtime()\n\n.binder\n├── install.R\n└── runtime.txt\n\nCreate postBuild file (RStudio)\nThere’s one last thing we need to take care of. In my tests I found that, for some reason, there was a problem with Tex installation in the binder environment that was preventing successful rendering of our paper to pdf.\nRe-installing TinyTex which is used by the rticles package through package bookdown seemed to fix this issue.\nIt would be nice if somebody launching our binder did not have to do this manually (and would save us having to document the step also!)\nLuckily there is another configuration file available to us we can use, postBuild!\nThere isn’t a holepunch function for this so let’s create it manually in the .binder/ directory.\n\nfile.create(\".binder/postBuild\")\n\n.binder\n├── install.R\n├── postBuild\n└── runtime.txt\npostBuild (with no file extension) is a script that can contain arbitrary commands to be run after the whole repository has been built. To make it a shell script we use #!/bin/bash at the top. Then we tell it to run the R command tinytex::install_tinytex(force = TRUE) in the next line.\n#!/bin/bash\nR -e \"tinytex::install_tinytex(force = TRUE)\"\nYour file should look like this:\n\nGenerate badge!\nNow it’s time to generate our badge to include in our README!\nWe use function generate_badge() and set the branch argument to install-r.\n\ngenerate_badge(branch = \"install-r\")\n\n✔ Setting active project to '/Users/Anna/Desktop/holepunch-compendium'\n• Copy and paste the following lines into 'README.Rmd':\n  <!-- badges: start -->\n  [![Launch Rstudio Binder](http://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/annakrystalli/holepunch-compendium/install-r?urlpath=rstudio)\n  <!-- badges: end -->\n  [Copied to clipboard]\nOnce generated, the badge is now on our clickboard, ready to be pasted in our README. So let’s:\n\nOpen README.Rmd.\nPaste the badge at the top of the file (below the YAML header).\nKnit the document to create README.md.\n\n\nCommit Changes (RStudio)\nLet’s now commit everything and push to Github!\n\nClick badge, generate binder (GitHub)\nLet’s head back to our repo and specifically the install-r branch:\n\nOnce on the correct branch, scroll down to the README and click the binder badge\n\nThat’s it!\nThis now takes you to mybinder.org which will start preparing an interactive instance of your repository!\n\nWhat’s going on in the background?\n\nBinder is using the configuration files provided and software called repo2Docker to create a Dockerfile, a recipe for your computational environment.\nBinder is using the Dockerfile to create a binder image, with all the software described in your configuration file installed. This takes some time but, once completed, binder will save the image so the next time you re-launch, this stage will be a lot faster.\nBinder will then use the image to launch an interactive container on JupyterHub in which we can interact with the code and data in our repo!\n\n\n\nIllustration about BinderHub architecture. The Turing Way project illustration by Scriberia. Used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3332807\n\n\nOnce our container is ready, binder launches our repo in an instance of Rstudio Server. We can can now reproduce our paper in Binder!\n\nSo let’s head to analysis/paper/paper.Rmd and open that file. At the top of the left hand panel, click on Knit. (and click yes to update the rmarkdown package if asked)\n\nIf everything went well, you should now see a rendered pdf of our paper! Reproducibility accomplished!"
  },
  {
    "objectID": "index.html#binderise-with-description-dockerfiles",
    "href": "index.html#binderise-with-description-dockerfiles",
    "title": "Binderising R projects with holepunch\n",
    "section": "Binderise with Description & Dockerfiles",
    "text": "Binderise with Description & Dockerfiles\nAnother way we can binderise our projects using holepunch is by:\n\nManaging dependencies through a DESCRIPTION file.\nCreating our environment using our own Dockerfile.\n\nThis method is tied to setting up your project as a research compendium.\nIf you are unfamiliar with the idea of research compendia, I highly recommend reading this paper by Marwick et al:\nMarwick B, Boettiger C, Mullen L. 2018. Packaging data analytical work reproducibly using R (and friends) PeerJ Preprints 6:e3192v2 https://doi.org/10.7287/peerj.preprints.3192v2\nAlso check out package rrtools that can help you package your research projects as research compendia as well the following tutorial which is how the materials we are working with were initially put together as a research compendium, using rrtools.\nCreate docker branch (RStudio)\nLet’s go back to RStudio.\nWe’ll again work on a separate branch. We want to branch off main again so first let’s go back to main by checking it out in the RStudio git panel:\n\nYou should now be in the main branch.\nNext let’s follow the same\nCreate compendium DESCRIPTION file (RStudio)\nThe DESCRIPTION file is a key file in R packages containing metadata. One of these metadata is also a list of package imports. We can therefore use this facility to list our dependencies in a DESCRIPTION file.\nholepunch has another function for creating an appropriate DESCRIPTION file for our compendium. It will again scan our repository for dependencies and list them in the Depends: section.\nThe description file effectively allows us to turn our compendium into a package. So we need to give it a package name and description.\n\nwrite_compendium_description(package = \"holepunchCompendium\", \n                             description = \"Binderised Research Compendium in R created using holepunch\")\n\nFinding R package dependencies ... Done!\n✔ Writing './DESCRIPTION'\nℹ Please update the description fields, particularly the title, description and author\nA DESCRIPTION file is created in the root of our directory. Let’s open it up.\nThere’s some additional fields to fill in. Go ahead and complete them for posterity.\nHere’s what my finished version looks like:\nType: Compendium\nPackage: holepunchCompendium\nTitle: Binderised Research Compendium in R created using holepunch\nVersion: 0.0.1\nAuthors@R: \n    person(\"Anna\", \"Krystalli\", , \"annakrystalli@googlemail.com\", role = c(\"aut\", \"cre\"))\nDescription: Binderised Research Compendium in R created using holepunch\nLicense: MIT\nDepends: \n    dplyr,\n    ggplot2,\n    ggthemes,\n    here,\n    knitr,\n    readr,\n    rmarkdown,\n    rticles\nEncoding: UTF-8\nLazyData: true\nFeel free to copy and edit. Just make sure it still remains a valid YAML file format (i.e. errors in indentation can make the file unreadable!\nrepo2docker can now use this file to install our dependencies. To pin the versions of our dependencies we could just include another runtime.txt and be done.\nI want to show you a different approach offered by holepunch so you are aware of it.\nCreate compendium Dockerfile (RStudio)\nIn the first approach to binderise our project, repo2docker created a Dockerfile in the background and used it to build us a computational environent.\nWe can however by pass that step by providing our own Dockerfile and holepunch has function write_dockerfile() for doing this.\nWe need to provide it with the name of the Dockerfile maintainer and again we specify the branch we are working in:\n\nwrite_dockerfile(maintainer = \"Anna Krystalli\", branch = \"docker\") \n\n✔ Setting active project to '/Users/Anna/Desktop/holepunch-compendium'\n[1] TRUE\n→ Setting R version to 4.2.2\n→ Locking packages down at 2023-02-09\n✔ Dockerfile generated at ./.binder/Dockerfile\nWarning message:\nIn write_dockerfile(maintainer = \"Anna Krystalli\", branch = \"docker\") :\n  The version of R matching the last modified file in this project is 4.2.2 and is \nthe one being used in your Dockerfile. However, you are running 4.2.1 locally.\nAssuming your code runs without errors, it might be ok to leave the Dockerfile at \n4.2.2. But if you wish to stick to your local version, you can re-run this \nfunction with a fixed date using r_date.\nWe’re getting a warning that the version of R pinned to the Dockerfile by today’s date is later than the one I have installed. I could correct this if I thought it would be a problem by specifying an earlier date using the r_date argument. But I know it’s not an issue so the version current for today’s date will work fine.\nLet’s have a look at the contents of the file:\nFROM rocker/binder:4.2.2\nLABEL maintainer='Anna Krystalli'\nCOPY --chown=${NB_USER} . ${HOME}\nUSER ${NB_USER}\n\n\n\nRUN wget https://github.com/annakrystalli/holepunch-compendium/raw/docker/DESCRIPTION && R -e \"options(repos = list(CRAN = 'http://mran.revolutionanalytics.com/snapshot/2023-02-12/')); devtools::install_deps()\"\n\nRUN rm DESCRIPTION.1; exit 0\nWhat this is effectively doing is:\n\npulling the latest binder image (version 4.2.2) maintained by the rocker project from dockerhub.\nCopying the contents of our repository into the container and giving appropriate rights\nSetting the user to NB_USER\nFollowing that is fetching the DESCPRIPTION file from our repo\nIt is then running an R command to install the dependencies listed in our DESCRIPTION files with the command devtools::install_deps().\nNote that the versions are pinned to today’s date through setting the repos option to http://mran.revolutionanalytics.com/snapshot/2023-02-09/ through command options(repos = list(CRAN = 'http://mran.revolutionanalytics.com/snapshot/2023-02-09/'))\n\nEdit Dockerfile\nThere are a couple amendments to the Dockerfile we need to make:\n\nFirst, there is a problem with the latest binder image with the installation of RStudio server. Change the version of the binder image to rocker/binder:4.2.0 for it to work.\nNext let’s add our command to install tinytex to our sequence of R commands, after devtools::install_deps() like so: devtools::install_deps(); tinytex::install_tinytex(force = TRUE)\n\nFROM rocker/binder:4.2.0\nLABEL maintainer='Anna Krystalli'\nCOPY --chown=${NB_USER} . ${HOME}\nUSER ${NB_USER}\n\n\n\nRUN wget https://github.com/annakrystalli/holepunch-compendium/raw/docker/DESCRIPTION && R -e \"options(repos = list(CRAN = 'http://mran.revolutionanalytics.com/snapshot/2023-02-09/')); devtools::install_deps(); tinytex::install_tinytex(force = TRUE)\"\n\nRUN rm DESCRIPTION.1; exit 0\nGenerate badge (RStudio)\nJust like before let’s generate our badge, this time for branch docker.\n\ngenerate_badge(branch = \"docker\")\n\n• Copy and paste the following lines into 'README.Rmd':\n  <!-- badges: start -->\n  [![Launch Rstudio Binder](http://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/annakrystalli/holepunch-compendium/docker?urlpath=rstudio)\n  <!-- badges: end -->\n  [Copied to clipboard]\nJust like before:\n\nOpen README.Rmd.\nPaste the badge at the top of the file (below the YAML header).\nKnit the document to create README.md.\nCommit all changes\nAgain commit all changes and make sure to PUSH TO GITHUB.\nBuild Binder\nAnother convenience function offered by holepunch is build_binder()\nThis function builds binder in the background and once an image is ready, will open the Binder URL\nLet’s go ahead and use it:\n\nbuild_binder()\n\nℹ Your Binder is being built in the background. Once built, your browser will automatically launch. You can also click the binder badge on your README at any time.\nHey Anna, welcome back, time to Rrrrrrrrock!\nHey Anna, welcome back, time to Rrrrrrrrock!\nHey Anna, welcome back, time to Rrrrrrrrock!\nReproduce paper in mybinder\nAs we did before with the install-r approach, let’s reproduce our paper:\n\nopen analysis/paper/paper.Rmd\nKnit!\n\nYou should be again looking at a successfuly rendered pdf version of the paper!"
  },
  {
    "objectID": "index.html#merge-your-favourite-approach-into-main",
    "href": "index.html#merge-your-favourite-approach-into-main",
    "title": "Binderising R projects with holepunch\n",
    "section": "Merge your favourite approach into main\n",
    "text": "Merge your favourite approach into main\n\nWe’ve played around in two separate branches. Let’s now merge our preferred approach into the main branch.\nI recommend merging the install-r branch.\nThat’s because of the current limitations of the Dockerfile approach:\n\nthe problem with the latest rocker/binder image it is based on.\nthe fact that holepunch still uses MRAN snapshots in it’s Dockerfile to pin versions. As mentioned this will be obsolete in July 2023. I’ve opened an issue in the package so hopefully this will be fixed soon.\nOverall I just wanted you to be aware of this approach in case you are well versed in Docker and would prefer to configure your projects with Dockerfiles.\n\nMerge install-r into main (GitHub)\n\nGo to the install-r branch and click Contribute\nOpen a pull request\nMerge pull request\nPull main branch locally (RStudio)\n\nCheckout the main branch.\nPull\nCorrect badge\nChange the URL in the badge in the README.Rmd to point to the main branch:\n[![Launch Rstudio Binder](http://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/annakrystalli/holepunch-compendium/main?urlpath=rstudio)\nRe-render README.Rmd, commit changes and push!\nYou’re repo is now all set up!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  }
]